services:
  order-service:
    container_name: order_service
    build:
      context: ./order-service
      target: development
    volumes:
      - ./order-service:/app
      - /app/node_modules
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  inventory-service:
    build:
      context: ./inventory-service
      target: development
    volumes:
      - ./inventory-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  payment-service:
    container_name: payment_service
    build:
      context: ./payment-service
      target: development
    volumes:
      - ./payment-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-1
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "5556:5556"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka-1:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      EXTRA_ARGS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=5556:/usr/app/jmx-kafka.yml"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-1 -Dcom.sun.management.jmxremote.rmi.port=9999"
      KAFKA_JMX_PORT: 9999
    volumes:
      - ./jmx-exporter/jmx_prometheus_javaagent.jar:/usr/app/jmx_prometheus_javaagent.jar
      - ./jmx-exporter/jmx-kafka.yml:/usr/app/jmx-kafka.yml
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  kafka-2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-2
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "5557:5557"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,INTERNAL://kafka-2:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      EXTRA_ARGS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=5557:/usr/app/jmx-kafka.yml"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-2 -Dcom.sun.management.jmxremote.rmi.port=9998"
      KAFKA_JMX_PORT: 9998
    volumes:
      - ./jmx-exporter/jmx_prometheus_javaagent.jar:/usr/app/jmx_prometheus_javaagent.jar
      - ./jmx-exporter/jmx-kafka.yml:/usr/app/jmx-kafka.yml
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  kafka-3:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-3
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "5558:5558"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094,INTERNAL://kafka-3:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      EXTRA_ARGS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=5558:/usr/app/jmx-kafka.yml"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-3 -Dcom.sun.management.jmxremote.rmi.port=9997"
      KAFKA_JMX_PORT: 9997
    volumes:
      - ./jmx-exporter/jmx_prometheus_javaagent.jar:/usr/app/jmx_prometheus_javaagent.jar
      - ./jmx-exporter/jmx-kafka.yml:/usr/app/jmx-kafka.yml
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  kafka-init:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./create-kafka-topics.sh:/tmp/create-kafka-topics.sh
    entrypoint: ["/bin/bash", "/tmp/create-kafka-topics.sh"]

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq_ui
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-cluster:
              properties:
                bootstrap.servers: "kafka-1:29092,kafka-2:29092,kafka-3:29092"
    networks:
      - app-network

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka_exporter
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka-1:29092
      - --kafka.server=kafka-2:29092
      - --kafka.server=kafka-3:29092
      - --web.listen-address=:9308
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge